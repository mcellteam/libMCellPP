
# includes needed

# bngl version

# no compartments initially -> associate compartments with geometry (later)
# use Bob's coverter internally? 
#  -> other preprocessor types?

# preprocessor -> from some HDL language?
# we cannot use '#'
# e.g. https://www.design-reuse.com/articles/45979/system-verilog-macro-a-powerful-feature-for-design-verification-projects.html
#


# 
units mcell # or put into parameters? -> no, must be defined before everything else? -> weird


begin parameters
   # certain parameter names have special meaning
   # parameter does not have to be defined
   time_step 1e-6
end parameters

# new sections are single-worded
begin geometry 
   #...
end geometry

# what should be keywords and what context-sensitive IDs?
# everything except for section names will be context-sensitive IDs?
# -> maybe yes..

# need some way how to extend BNGL base constructs 
# with struct-like initialization needed for MCell attributes
begin molecule types
	A(	
		B~0~P,
		.diffusion_constant_3d = 1e-6 # the equality operator is incosistent with parameters 
	)
	
    A(    
        B~0~P,
        diffusion_constant_3d = 1e-6 
    )
    
	or 
	A(
		B~0~P,
    ) { 
		diffusion_constant_3d = 1e-6 
    }
    	
    or
	A(
		B~0~P,
    )  
	.diffusion_constant_3d = 1e-6 
    .??
    
    
    
end molecule types

# what can I put into 
# begin species?

# should we make a new section?
begin releases
    rel_1(
        # named parameters
        # it would be nice to generate 
        # these parts of code somehow, because the Python API will use the 
        # same attributes
        # -> generate parts of a parser from the python interface
        #    ??
        # other ways to share?
        #
        # 
        # 
    	shape = 'spherical', # comma is optional? - no, obligatory - same as molecule types
    	location = [0, 0, 0],
		site_diameter = 0,
		molecule = A,
		number_to_release = 1,
		release_probability = 1, # last comma is allowed    	
    )
end releases

# Support 
begin observables
	Molecules A_total  A()
end observables


begin python
# shared functions?
#def calculate_release_rate():

# are there are some functions in BNGL?
end python